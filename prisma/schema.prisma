generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  email                String               @unique
  name                 String?
  password             String
  image                String?
  bio                  String?
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  publicId             String               @unique @default(uuid())
  username             String               @unique
  id                   Int                  @id @default(autoincrement())
  isActive             Boolean              @default(true)
  accounts             Account[]
  comments             Comment[]
  fireCalculations     FIRECalculator[]
  followers            Follow[]             @relation("UserFollowers")
  following            Follow[]             @relation("UserFollowing")
  goalCalculations     GoalCalculator[]
  interestCalculations InterestCalculator[]
  Like                 Like[]
  Log                  Log[]                @relation("UserLogs")
  portfolios           Portfolio[]
  posts                Post[]
  roicCalculations     ROICCalculator[]
  sessions             Session[]
  watchlists           Watchlist[]
}

model Account {
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  publicId          String  @unique @default(uuid())
  id                Int     @id @default(autoincrement())
  userId            Int
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  expires      DateTime
  publicId     String   @unique @default(uuid())
  id           Int      @id @default(autoincrement())
  userId       Int
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Portfolio {
  name         String
  description  String?
  isPublic     Boolean       @default(false)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  publicId     String        @unique @default(uuid())
  slug         String        @unique
  id           Int           @id @default(autoincrement())
  userId       Int
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]
  assets       Asset[]       @relation("AssetToPortfolio")

  @@index([userId])
}

model Asset {
  ticker           String
  name             String
  assetType        AssetType         @default(STOCK)
  currentPrice     Float?
  currency         String            @default("USD")
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  publicId         String            @unique @default(uuid())
  id               Int               @id @default(autoincrement())
  dividendSchedule DividendSchedule?
  transactions     Transaction[]
  portfolios       Portfolio[]       @relation("AssetToPortfolio")
  watchlists       Watchlist[]       @relation("AssetToWatchlist")

  @@index([ticker])
}

model Transaction {
  type        TransactionType
  quantity    Float
  price       Float
  total       Float
  fee         Float           @default(0)
  currency    String          @default("USD")
  date        DateTime
  notes       String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  publicId    String          @unique @default(uuid())
  id          Int             @id @default(autoincrement())
  portfolioId Int
  assetId     Int
  asset       Asset           @relation(fields: [assetId], references: [id])
  portfolio   Portfolio       @relation(fields: [portfolioId], references: [id], onDelete: Cascade)

  @@index([portfolioId])
  @@index([assetId])
}

model DividendSchedule {
  frequency      DividendFrequency
  amount         Float?
  yield          Float?
  exDividendDate DateTime?
  paymentDate    DateTime?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  publicId       String            @unique @default(uuid())
  id             Int               @id @default(autoincrement())
  assetId        Int               @unique
  history        DividendPayment[]
  asset          Asset             @relation(fields: [assetId], references: [id])
}

model DividendPayment {
  amount         Float
  exDividendDate DateTime
  paymentDate    DateTime
  createdAt      DateTime         @default(now())
  publicId       String           @unique @default(uuid())
  id             Int              @id @default(autoincrement())
  scheduleId     Int
  schedule       DividendSchedule @relation(fields: [scheduleId], references: [id], onDelete: Cascade)

  @@index([scheduleId])
}

model Watchlist {
  name        String
  description String?
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  publicId    String   @unique @default(uuid())
  slug        String   @unique
  id          Int      @id @default(autoincrement())
  userId      Int
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  assets      Asset[]  @relation("AssetToWatchlist")

  @@index([userId])
}

model InterestCalculator {
  initialAmount        Float
  annualPercentage     Float
  timePeriod           Int
  contributionAmount   Float
  contributionInterval String
  results              Json
  createdAt            DateTime @default(now())
  publicId             String   @unique @default(uuid())
  id                   Int      @id @default(autoincrement())
  userId               Int
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model GoalCalculator {
  goalAmount           Float
  initialAmount        Float
  annualPercentage     Float
  contributionAmount   Float
  contributionInterval String
  results              Json
  createdAt            DateTime @default(now())
  publicId             String   @unique @default(uuid())
  id                   Int      @id @default(autoincrement())
  userId               Int
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model ROICCalculator {
  initialNopat              Float
  initialInvestedCapital    Float
  nopatGrowthRate           Float
  investedCapitalGrowthRate Float
  timePeriod                Int
  results                   Json
  createdAt                 DateTime @default(now())
  publicId                  String   @unique @default(uuid())
  id                        Int      @id @default(autoincrement())
  userId                    Int
  user                      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model FIRECalculator {
  currentAge            Int
  currentAnnualExpenses Float
  currentAnnualIncome   Float
  currentSavingsRate    Float
  currentPortfolioValue Float
  expectedAnnualReturn  Float
  expectedInflation     Float
  safeWithdrawalRate    Float
  results               Json
  createdAt             DateTime @default(now())
  publicId              String   @unique @default(uuid())
  id                    Int      @id @default(autoincrement())
  userId                Int
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Post {
  title     String
  content   String
  published Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  publicId  String    @unique @default(uuid())
  id        Int       @id @default(autoincrement())
  userId    Int
  comments  Comment[]
  likes     Like[]
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Comment {
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  publicId  String   @unique @default(uuid())
  id        Int      @id @default(autoincrement())
  postId    Int
  userId    Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  likes     Like[]

  @@index([postId])
  @@index([userId])
}

model Like {
  createdAt DateTime @default(now())
  publicId  String   @unique @default(uuid())
  id        Int      @id @default(autoincrement())
  userId    Int
  postId    Int?
  commentId Int?
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId, commentId])
  @@index([userId])
  @@index([postId])
  @@index([commentId])
}

model Follow {
  createdAt   DateTime @default(now())
  publicId    String   @unique @default(uuid())
  id          Int      @id @default(autoincrement())
  followerId  Int
  followingId Int
  follower    User     @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("UserFollowing", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model Log {
  id        Int      @id @default(autoincrement())
  publicId  String   @unique @default(uuid())
  logType   LogType
  message   String
  Location  String?
  userId    Int
  createdAt DateTime @default(now())
  user      User     @relation("UserLogs", fields: [userId], references: [id], onDelete: Cascade)

  @@index([publicId])
  @@index([logType])
}

enum AssetType {
  STOCK
  ETF
  MUTUAL_FUND
  BOND
  CRYPTO
  CASH
  REAL_ESTATE
  OTHER
}

enum TransactionType {
  BUY
  SELL
  DIVIDEND
  SPLIT
  TRANSFER_IN
  TRANSFER_OUT
  DEPOSIT
  WITHDRAWAL
  FEE
}

enum DividendFrequency {
  MONTHLY
  QUARTERLY
  SEMI_ANNUALLY
  ANNUALLY
  IRREGULAR
}

enum LogType {
  INFO
  WARNING
  ERROR
  SUCCESS
  OTHER
}
